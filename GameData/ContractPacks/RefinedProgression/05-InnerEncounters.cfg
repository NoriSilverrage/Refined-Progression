//--
//------ Refined Progression Contracts
//--

//----Contains

//--Inner planet contracts
//InnerFlyBy
//InnerOrbits
//


//--Inner Planet Fly By
CONTRACT_TYPE
{
    name = InnerFlyBy
	group = FarExplorer
	
	title = Perform a fly by of @targetBody
	description = ... @targetBody ... @/targetAlt meter, flyby.
	synopsis = Do a Flyby of @targetBody
	completedMessage = ....

	agent = Experimental Astrophysics Group

	prestige = Significant
	targetBody = @/validTarget
	weight = 2.0
	maxSimultaneous = 2
	rewardScience = 4.0
	rewardReputation = 8.0
	rewardFunds = 32000
	failureFunds = 12000
	failureReputation = 8.0
	advanceFunds = 8000
	
	DATA
    {
        type = bool
        homeIsPlanet = HomeWorld().Parent() == Sun
    }
	
    DATA
    {
        type = double
        sma = @homeIsPlanet ? HomeWorld().SemiMajorAxis() : HomeWorld().Parent().SemiMajorAxis()
    }

    DATA
    {
        type = CelestialBody
		activeUniqueValue = true
        validTarget = AllBodies().Where(cb => cb.SemiMajorAxis() < @/sma && cb.IsPlanet() && cb.HaveReached() == false).Random()
    }
	
	DATA
    {
        type = float
        targetAlt = @targetBody.SpaceAltitudeThreshold() * 2
    }
	 
	REQUIREMENT
	{
		name = Any
		type = Any
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = EscapeHomeWorld
		}
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = UMEscapeHomeworld
		}
	}
	
	REQUIREMENT
	{
		name = Any
		type = Any
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = CloseFlyBy
		}
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = CloseOrbits
		}
	}
	
	PARAMETER
	{
		name = flyby
		type = VesselParameterGroup
		
		title = Complete a Flyby of @targetBody
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}
		
		PARAMETER
		{
			name = ReachState
			type = ReachState
			maxAltitude = @/targetAlt
		}
	}
}



//--Inner Planet Orbit and Landing
CONTRACT_TYPE
{
    name = InnerOrbits
	group = FarExplorer
	
	title = Orbit and Explore @targetBody
	description = ... 
	synopsis = ...
	completedMessage = ...

	agent = Experimental Astrophysics Group

	prestige = Exceptional
	targetBody = @/validTarget
	weight = 2.0
	maxSimultaneous = 2
	rewardScience = 8.0
	rewardReputation = 16.0
	rewardFunds = 40000
	failureFunds = 20000
	failureReputation = 8.0
	advanceFunds = 20000

	DATA
    {
        type = bool
        homeIsPlanet = HomeWorld().Parent() == Sun
    }
	
    DATA
    {
        type = double
        sma = @homeIsPlanet ? HomeWorld().SemiMajorAxis() : HomeWorld().Parent().SemiMajorAxis()
    }

    DATA
    {
        type = CelestialBody
		activeUniqueValue = true
        validTarget = AllBodies().Where(cb => cb.SemiMajorAxis() < @/sma && cb.IsPlanet() && cb.HaveReached() && cb.HaveLandedOn() == false).Random()
    }

	REQUIREMENT
	{
		name = Any
		type = Any
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = EscapeHomeWorld
		}
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = UMEscapeHomeworld
		}
	}
	
	REQUIREMENT
	{
		name = Any
		type = Any
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = FirstOrbits
		}
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = FirstLandings
		}
	}
	
	PARAMETER
	{
		name = innerorbit
		type = VesselParameterGroup
		define = "innerorbiter"+"@targetBody"
		duration = 60m
		title = Achieve orbit of @targetBody
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 1
		}
		
		PARAMETER
		{
			name = Orbit
			type = Orbit
			maxApA = @targetBody.SpaceAltitudeThreshold() * 2
		}
	}
	
	PARAMETER
	{
		name = innerhome
		type = VesselParameterGroup
		vessel = @innerorbit/define
		title = xyz
		notes = xyz123
		
		completeInSequence = true
		
		PARAMETER
		{
			name = ForLanding
			type = Any
			optional = true
			notes = Optionally land and collect science.
			
			REQUIREMENT
			{
				name = Expression
				type = Expression
				expression = @targetBody.HasSurface() == true
			}
			
			PARAMETER
			{
				name = landing
				type = ReachState
				situation = LANDED
				rewardFunds = 30000
				rewardReputation = 10
			}
			
			PARAMETER
			{
				name = SurfaceScience
				type = CollectScience
				rewardFunds = 10000
				rewardReputation = 5
				
				location = Surface
				experiment = evaReport
				experiment = temperatureScan
				experiment = crewReport
				experiment = mobileMaterialsLab
				experiment = mysteryGoo
				
				recoveryMethod = RecoverOrTransmit
			}
		}
		
		PARAMETER
		{
			name = SpaceScience
			type = CollectScience
			optional = true
			rewardFunds = 5000
			
			location = Space
			notes = Optionally collect several science experiements for a bonus.
			experiment = evaReport
			experiment = temperatureScan
			experiment = crewReport
			experiment = mysteryGoo
			
			recoveryMethod = RecoverOrTransmit
		}
		
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
		}
	}
	
	
	BEHAVIOUR
	{
		name = AwardExperience
		type = AwardExperience
	
		parameter = ForLanding
		experience = 4 / @targetBody.Multiplier()
	}
}