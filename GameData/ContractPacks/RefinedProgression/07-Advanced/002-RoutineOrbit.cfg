//--
//------ Refined Progression Contracts
//--
//--- Advanced/Repeatable contracts


//--Routine Orbit
CONTRACT_TYPE
{
    name = RoutineOrbit
	group = Routinely

	title = Routine Orbit
	description = It is important to keep our crew's sharp and at the ready. Thus we would like you to put @/crewcount crew into orbit and hold for one rotation.
	notes = This contract provides all Kerbals in the vessel with 2 bonus experience and as such is a good repeatable training contract.
    genericDescription = It is important to keep our crew's sharp and at the ready. Thus we would like you to put crew into orbit and hold for one rotation.
	synopsis = Orbit @/crewcount crew
	completedMessage = Great job!

	agent = Experimental Astrophysics Group
	
	deadline = 90
	prestige = Trivial
	targetBody = HomeWorld()
	maxSimultaneous = 1
	rewardReputation = 5 / @targetBody.Multiplier()
	rewardFunds = 20000 / @targetBody.Multiplier() + @/fundness
	failureFunds = @rewardFunds * 0.25
	advanceFunds = @rewardFunds * 0.25

	REQUIREMENT
	{
		name = All
		type = All
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = LongOrbit
			cooldownDuration = 7d
		}
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = CrewedOrbit
			cooldownDuration = 7d
		}
		
		REQUIREMENT
		{
			type = CompleteContract
			contractType = RoutineOrbit
			minCount = 0
			cooldownDuration = 14d
		}
	}
	
	DATA
	{
		type = int
		crewcount = Random(1,5)
	}
	
	DATA
	{
		type = double
		fundness = (15000 * @/crewcount) / @targetBody.Multiplier()
	
	}
	
	DATA
	{
		type = double
		rotateperiod = @targetBody.RotationalPeriod()
	}
	
	PARAMETER
	{
		name = Routine
		type = VesselParameterGroup
		
		title = Routine manned orbit
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = @/crewcount
		}
		
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = @targetBody.AtmosphereAltitude() * 2
		}
		
		PARAMETER
		{
			name = Duration
			type = Duration
			duration = @/rotateperiod
			
			preWaitText = Orbit for @/rotateperiod
			waitingText = A little longer...
			completionText = All set. Now return home.
			rewardFunds = 10000 / @targetBody.Multiplier()
			rewardReputation = 5 / @targetBody.Multiplier()
		}
		
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
		}
	}
	

	
	BEHAVIOUR
	{
		name = AwardExperience
		type = AwardExperience
		parameter = Routine
		experience = 2 / @targetBody.Multiplier()
	}
}
