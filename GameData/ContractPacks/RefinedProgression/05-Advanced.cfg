//--
//------ Refined Progression Contracts
//--
//--
//--

//----Contains
//--Repeatable
//YearLongOrbit
//RoutineOrbit
//OrbRDV
//InnerTour
//OuterTour
//CloseMoonTour
//FarMoonTour

//--One off
//UMKEO



//--
//------ Mix of repeatable contracts
//--



//--Year Long Manned Orbit
CONTRACT_TYPE
{
    name = YearLongOrbit
	group = Routinely

	title = One year in Space: Manned
	description = We don't know what the long-term effects of being in space are. Send someone to orbit for a year to see. It might provide some valuable experience when completed.
	notes = You are required to have @/crewcount Kerbals orbit for 1 year with a New Vessel that has at least @/crewcount*2 crew capacity. This could be a newly launched Space Station as you aren't required to bring the Kerbals home.
	
	synopsis = Orbit a manned vessel for one whole year.
	completedMessage = Excellent job. I'm sure that we will learn something worthwhile from this. And look all 3 of our crewed gained valuable experience.

	agent = Experimental Astrophysics Group
	
	deadline = 852
	prestige = Significant
	targetBody = HomeWorld()
	maxSimultaneous = 1
	rewardScience = (@/crewcount * 5) / @targetBody.Multiplier()
	rewardReputation = (@/crewcount * 15) / @targetBody.Multiplier()
	rewardFunds = 100000 / @targetBody.Multiplier() + @/fundness
	failureFunds = 50000 / @targetBody.Multiplier() + @/fundness / 4
	advanceFunds = 50000 / @targetBody.Multiplier() + @/fundness / 4

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = LongOrbit
	}
	
	DATA
	{
		type = int
		crewcount = Random(2,8)
	}
	
	DATA
	{
		type = double
		fundness = (50000 * @/crewcount) / @targetBody.Multiplier()
	
	}
	
	
	PARAMETER
	{
		name = YearLongOrbit
		type = VesselParameterGroup
		
		title = Long manned orbit
		notes = Orbit for 1 whole year. Kerbal's like their space and might get stir crazy if there isn't enough.
		duration = 1y
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = @/crewcount
			maxCrew = @/crewcount
		}
		
		PARAMETER
		{
			name = HasCrewCapacity
			type = HasCrewCapacity

			minCapacity = @/crewcount * 2
			title = Minimum crew capacity of @minCapacity. A year in space is no picnic, so lets make sure they have room to spare.
		}
		
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = @targetBody.AtmosphereAltitude() * 2
		}
		
	}
	
	BEHAVIOUR
	{
		name = AwardExperience
		type = AwardExperience
		parameter = YearLongOrbit
		experience = (2 * @/crewcount) / @targetBody.Multiplier()
	}
}

//--Routine Orbit
CONTRACT_TYPE
{
    name = RoutineOrbit
	group = Routinely

	title = Routine Orbit
	description = It is important to keep our crew's sharp and at the ready. Thus we would like you to put @/crewcount crew into orbit and hold for one rotation.
	synopsis = Orbit @/crewcount crew
	completedMessage = Great job!

	agent = Experimental Astrophysics Group
	
	deadline = 90
	prestige = Trivial
	targetBody = HomeWorld()
	maxSimultaneous = 1
	rewardReputation = 2 / @targetBody.Multiplier()
	rewardFunds = @/fundness
	failureFunds = @rewardFunds * 0.375
	advanceFunds = @rewardFunds * 0.25

	REQUIREMENT
	{
		name = All
		type = All
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = LongOrbit
		}
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = CrewedOrbit
		}
	}

	DATA
	{
		type = int
		crewcount = Random(1,4)
	}
	
	DATA
	{
		type = double
		fundness = (15000 * @/crewcount) / @targetBody.Multiplier()
	
	}
	
	DATA
	{
		type = double
		rotateperiod = @targetBody.RotationalPeriod()
	}
	
	PARAMETER
	{
		name = Routine
		type = VesselParameterGroup
		
		title = Routine manned orbit
		duration = @/rotateperiod
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = @/crewcount
		}
		
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = @targetBody.AtmosphereAltitude() * 2
		}
		
	}
	
	PARAMETER
	{
		name = ReturnHome
		type = ReturnHome
	}
	
	BEHAVIOUR
	{
		name = AwardExperience
		type = AwardExperience
		parameter = Routine
		experience = 1 / @targetBody.Multiplier()
	}
}



//--Orbital rendezvous and optional docking
CONTRACT_TYPE
{
    name = OrbRDV
	group = Routinely

	title = Orbital rendezvous and docking
	description = ...
	synopsis = ...
	completedMessage = ...

	agent = Experimental Astrophysics Group
	
	deadline = 90
	prestige = Significant
	targetBody = HomeWorld()
	maxSimultaneous = 1
	rewardReputation = 10.0 / @targetBody.Multiplier()
	rewardFunds = 40000 / @targetBody.Multiplier()
	failureFunds = 15000 / @targetBody.Multiplier()
	advanceFunds = 10000 / @targetBody.Multiplier()

	REQUIREMENT
	{
		name = Orbit
		type = Orbit
	}
	
	PARAMETER
	{
		name = RDV
		type = VesselParameterGroup
		
		title = rendezvous
		notes = ...
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 1
		}
		
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = @targetBody.AtmosphereAltitude() * 1.1
		}
		
		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous
			completeInSequence = true
			title = Rendezvous with
		}
		
		PARAMETER
		{
			name = Docking
			type = Docking
			completeInSequence = true
			optional = true
			title = Dock
			
			rewardFunds = 10000.0 / @targetBody.Multiplier()
			rewardReputation = 5.0 / @targetBody.Multiplier()
		}
	}
	
	PARAMETER
	{
		name = ReturnHome
		type = ReturnHome
	}
	
	BEHAVIOUR
	{
		name = AwardExperience
		type = AwardExperience
		parameter = RDV
		experience = 3 / @targetBody.Multiplier()
	}
}



//---
//----- One off contracts
//---

//--Unmanned Kerbisynchronous Equatorial Orbit
CONTRACT_TYPE
{
    name = UMKEO
	group = Routinely

	title = Synchronous Equatorial Orbit
	description = Synchronous Equatorial Orbit sure is a mouthful. But achieving it seems to be a big deal.
	synopsis = Achieve @targetBody Synchronous Equatorial Orbit
	completedMessage = Well that seemed to work.

	agent = Experimental Astrophysics Group
	
	deadline = 426
	prestige = Significant
	targetBody = HomeWorld()
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 4.0
	rewardReputation = 40.0 / @targetBody.Multiplier()
	rewardFunds = 40000 / @targetBody.Multiplier()
	failureFunds = 20000 / @targetBody.Multiplier()
	advanceFunds = 10000 / @targetBody.Multiplier()

	
    DATA
    {
        type = double
        orbitperiodmin = @targetBody.RotationalPeriod() * 0.98
        orbitperiodmax = @targetBody.RotationalPeriod() * 1.02
    }
	
	REQUIREMENT
	{
		name = All
		type = All
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = UnmannedOrbit
		}
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = HighOrbit
		}
	}
	
	PARAMETER
	{
		name = UMKEO
		type = VesselParameterGroup
		
		title = Orbit for 1 hours
		notes = Achieve a Synchronous Orbit around the Homeworld. You will likely need to look up what the rough numbers are. You have a 2% margin of error on min and max.
		duration = 1h
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}
		
		PARAMETER
		{
			name = Orbit
			type = Orbit
			maxInclination = 3
			maxEccentricity = 0.05
			
			minPeriod = @/orbitperiodmin
			maxPeriod = @/orbitperiodmax
		}

	}
}